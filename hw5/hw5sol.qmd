---
title: "Biostat 203B Homework 5"
subtitle: Due Mar 22 @ 11:59PM
author: "Jiyin (Jenny) Zhang, UID: 606331859"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
---

## Predicting ICU duration

Using the ICU cohort `mimiciv_icu_cohort.rds` you built in Homework 4, develop at least three machine learning approaches (logistic regression with enet regularization, random forest, boosting, SVM, MLP, etc) plus a model stacking approach for predicting whether a patient's ICU stay will be longer than 2 days. You should use the `los_long` variable as the outcome. You algorithms can use patient demographic information (gender, age at ICU `intime`, marital status, race), ICU admission information (first care unit), the last lab measurements before the ICU stay, and first vital measurements during ICU stay as features. You are welcome to use any feature engineering techniques you think are appropriate; but make sure to not use features that are not available at an ICU stay's `intime`. For instance, `last_careunit` cannot be used in your algorithms. 

# 0. Load necessary libraries.

```{r}
rm(list = ls())
library(dplyr) # for use of arrange()
library(tidymodels) # for use of initial_split()
library(gtsummary) # for use of tbl_summary()
library(xgboost)
library(stacks)
library(vip)
```

# 1. Data preprocessing and feature engineering.

Read in the dataset.

```{r}
mimiciv_icu_cohort <- readRDS("~/203b-hw/hw5/mimic_icu_cohort.rds")
```

Have a look at the dataset.

```{r}
mimiciv_icu_cohort %>% head()
```

# 2. Partition data into 50% training set and 50% test set. Stratify partitioning according to `los_long`. For grading purpose, sort the data by `subject_id`, `hadm_id`, and `stay_id` and use the seed `203` for the initial data split. Below is the sample code.

Sort the dataset.

```{r}
# sort
mimiciv_icu_cohort <- mimiciv_icu_cohort |>
  arrange(subject_id, hadm_id, stay_id) |>
  select(los_long, gender, age_intime, 
         marital_status, race, first_careunit, bicarbonate, chloride, 
         creatinine, glucose, potassium, sodium, hematocrit, wbc, heart_rate, 
         non_invasive_blood_pressure_systolic, temperature_fahrenheit,
         non_invasive_blood_pressure_diastolic, respiratory_rate)
  
```

Find missing values in all the variables.

```{r}
# missing values
cat("Missing values in the dataset:\n")
print(colSums(is.na(mimiciv_icu_cohort)))
```

Check the type of variables in the dataset.

```{r}
dataset <- mimiciv_icu_cohort

# Loop through each column of the dataset
for (col_name in names(dataset)) {
  # Check if the column is numeric
  is_numeric <- is.numeric(dataset[[col_name]])
  # Check if the column is categorical (a factor)
  is_categorical <- is.factor(dataset[[col_name]])
  
  # Print information about the column
  cat("Variable:", col_name, "\n")
  if (is_numeric) {
    cat("   Data Type: Numeric\n")
  } else if (is_categorical) {
    cat("   Data Type: Categorical\n")
  } else {
    cat("   Data Type: Other\n")
  }
}

```

Change the variables into suitable types.

```{r}
# Change the variables into suitable types
mimiciv_icu_cohort <- mimiciv_icu_cohort |>
  mutate(los_long = as.factor(if_else(los_long, "yes", "no")),
         gender = as.factor(gender),
         marital_status = as.factor(marital_status),
         race = as.factor(race)
  )
```

Check the type of variables in the dataset again.

```{r}
dataset <- mimiciv_icu_cohort

# Loop through each column of the dataset
for (col_name in names(dataset)) {
  # Check if the column is numeric
  is_numeric <- is.numeric(dataset[[col_name]])
  # Check if the column is categorical (a factor)
  is_categorical <- is.factor(dataset[[col_name]])
  
  # Print information about the column
  cat("Variable:", col_name, "\n")
  if (is_numeric) {
    cat("   Data Type: Numeric\n")
  } else if (is_categorical) {
    cat("   Data Type: Categorical\n")
  } else {
    cat("   Data Type: Other\n")
  }
}
```

Numerical summaries stratified by the outcome `los_long`.

```{r}
mimiciv_icu_cohort |> tbl_summary(by = los_long)
```

**Initial split into test and non-test sets:**

```{r}
set.seed(203)
data_split <- initial_split(
  mimiciv_icu_cohort,
  # stratify by los_long
  strata = "los_long",
  prop = 0.5
)
```

```{r}
mimic_other <- training(data_split)
dim(mimic_other)
```

```{r}
mimic_test <- testing(data_split)
dim(mimic_test)
```

**Logistic regression with enet regularization:**

**Recipe:** 

```{r}
logit_recipe <-
  recipe(
    los_long ~ .,
    data = mimic_other
  ) |>
  
  # mean imputation for numeric variables
  step_impute_mean(bicarbonate) |>
  step_impute_mean(chloride) |>
  step_impute_mean(creatinine) |>
  step_impute_mean(glucose) |>
  step_impute_mean(potassium) |>
  step_impute_mean(sodium) |>
  step_impute_mean(hematocrit) |>
  step_impute_mean(wbc) |>
  step_impute_mean(heart_rate) |>
  step_impute_mean(non_invasive_blood_pressure_systolic) |>
  step_impute_mean(temperature_fahrenheit) |>
  step_impute_mean(non_invasive_blood_pressure_diastolic) |>
  step_impute_mean(respiratory_rate) |>
  
  # mode imputation for categorical variables
  step_impute_mode(marital_status) |>
  
  # create traditional dummy variables
  step_dummy(all_nominal_predictors()) |>
  
  # zero-variance filter
  step_zv(all_numeric_predictors()) |>
  
  # center and scale numeric data
  step_normalize(all_numeric_predictors()) |>
  
  # estimate the means and standard deviations
  prep(training = mimic_other, retain = TRUE) |>
  
  print()
```

# 3. Train and tune the models using the training set.

**Model:**

```{r}
logit_mod <- 
  logistic_reg(
    penalty = tune(), 
    mixture = tune()
  ) |> 
  set_engine("glmnet", standardize = FALSE) |>
  print()
```
**Workflow:**

```{r}
logit_wf <- workflow() |>
  add_recipe(logit_recipe) |>
  add_model(logit_mod) |>
  print()
```

**Tuning grid:**

```{r}
logit_grid <- grid_regular(
  penalty(range = c(-6, 3)), 
  mixture(),
  levels = c(100, 5)
  ) |>
  print()
```

**Cross-validation:**

```{r}
set.seed(203)

folds <- vfold_cv(mimic_other, v = 5)
folds
```
Fit cross-validation.

```{r}
(logit_fit <- logit_wf |>
  tune_grid(
    resamples = folds,
    grid = logit_grid,
    metrics = metric_set(roc_auc, accuracy),
    control = control_stack_grid()
    )) |>
  #show_notes(.Last.tune.result) |>
  system.time()
```

```{r}
logit_fit
```

Visualize CV results:

```{r}
logit_fit |>
  # aggregate metrics from K folds
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = aes(x = penalty, y = mean, color = factor(mixture))) +
  geom_point() +
  labs(x = "Penalty", y = "CV AUC") +
  scale_x_log10()
```
Show the top 5 models.

```{r}
logit_fit |>
  show_best("roc_auc")
```
Select the best model.

```{r}
best_logit <- logit_fit |>
  select_best("roc_auc")
best_logit
```
**Finalize the model:**

Final workflow.

```{r}
final_wf_logit <- logit_wf |>
  finalize_workflow(best_logit)
final_wf_logit
```

Fit the whole training set, then predict the test cases.

```{r}
final_fit_logit <- 
  final_wf_logit |>
  last_fit(data_split)
final_fit_logit
```

Test metrics.

```{r}
final_fit_logit |> 
  collect_metrics()
```

Accuracy of test dataset:

```{r}
accuracy_logit <- final_fit_logit |> 
  collect_metrics() |>
  filter(.metric == "accuracy") |>
  pull(.estimate)
accuracy_logit
```

ROC AUC of test dataset:

```{r}
roc_auc_logit <- final_fit_logit |> 
  collect_metrics() |>
  filter(.metric == "roc_auc") |>
  pull(.estimate)
roc_auc_logit 
```

**Random forest:**

**Recipe:**

```{r}
rf_recipe <- 
  recipe(
    los_long ~ ., 
    data = mimic_other
  ) |>
  # # create traditional dummy variables (not necessary for random forest in R)
  # step_dummy(all_nominal()) |>
  
  # mean imputation for numeric variables
  step_impute_mean(bicarbonate) |>
  step_impute_mean(chloride) |>
  step_impute_mean(creatinine) |>
  step_impute_mean(glucose) |>
  step_impute_mean(potassium) |>
  step_impute_mean(sodium) |>
  step_impute_mean(hematocrit) |>
  step_impute_mean(wbc) |>
  step_impute_mean(heart_rate) |>
  step_impute_mean(non_invasive_blood_pressure_systolic) |>
  step_impute_mean(temperature_fahrenheit) |>
  step_impute_mean(non_invasive_blood_pressure_diastolic) |>
  step_impute_mean(respiratory_rate) |>
  
  # mode imputation for categorical variables
  step_impute_mode(marital_status) |>
  
  # zero-variance filter
  step_zv(all_numeric_predictors()) |>
  # # center and scale numeric data (not necessary for random forest)
  # step_normalize(all_numeric_predictors()) |>
  
  # estimate the means and standard deviations
  prep(training = mimic_other, retain = TRUE) |>
  print()

```

**Model:**

```{r}
rf_mod <- 
  rand_forest(
    mode = "classification",
    # Number of predictors randomly sampled in each split
    mtry = tune(),
    # Number of trees in ensemble
    trees = tune()
  ) |> 
  set_engine("ranger", importance = "impurity")
rf_mod
```
**Workflow:**

```{r}
rf_wf <- workflow() |>
  add_recipe(rf_recipe) |>
  add_model(rf_mod)
rf_wf
```

**Tuning grid:**

```{r}
rf_grid <- grid_regular(
  trees(range = c(100L, 500L)), 
  mtry(range = c(1L, 5L)),
  levels = c(5, 5)
  )
rf_grid
```

**Cross-validation:**

```{r}
set.seed(203)

folds <- vfold_cv(mimic_other, v = 5)
folds
```

Fit cross-validation.

```{r}
rf_fit <- rf_wf |>
  tune_grid(
    resamples = folds,
    grid = rf_grid,
    #metrics = metric_set(roc_auc, accuracy),
    control = control_stack_grid()
    )
rf_fit
```

Visualize CV results:

```{r}
rf_fit |>
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = aes(x = trees, y = mean, color = factor(mtry))) +
  geom_point() + 
  # geom_line() + 
  labs(x = "Number of Trees", y = "CV AUC")
```

Show the top 5 models.

```{r}
rf_fit |>
  show_best("roc_auc")
```
 
Select the best model.

```{r}
best_rf <- rf_fit |>
  select_best("roc_auc")
best_rf
```
 
**Finalize the model:**

Final workflow.

```{r}
final_wf_rf <- rf_wf |>
  finalize_workflow(best_rf)
final_wf_rf
```
 
Fit the whole training set, then predict the test cases.

```{r}
final_fit_rf <- 
  final_wf_rf |>
  last_fit(data_split)
final_fit_rf
```
 

Importance of features:

```{r}
final_fit_rf %>% 
  extract_fit_parsnip() %>% 
  vip()
```

Test metrics.

```{r}
final_fit_rf |> 
  collect_metrics()
```
 
Accuracy of test dataset:

```{r}
accuracy_rf <- final_fit_rf |> 
  collect_metrics() |>
  filter(.metric == "accuracy") |>
  pull(.estimate)
accuracy_rf
```

ROC AUC of test dataset:

```{r}
roc_auc_rf <- final_fit_rf |> 
  collect_metrics() |>
  filter(.metric == "roc_auc") |>
  pull(.estimate)
roc_auc_rf
```

**Boosting:**

**Recipe:**

```{r}
gb_recipe <- 
  recipe(
    los_long ~ ., 
    data = mimic_other
  ) |>
  
  # mean imputation for numeric variables
  step_impute_mean(bicarbonate) |>
  step_impute_mean(chloride) |>
  step_impute_mean(creatinine) |>
  step_impute_mean(glucose) |>
  step_impute_mean(potassium) |>
  step_impute_mean(sodium) |>
  step_impute_mean(hematocrit) |>
  step_impute_mean(wbc) |>
  step_impute_mean(heart_rate) |>
  step_impute_mean(non_invasive_blood_pressure_systolic) |>
  step_impute_mean(temperature_fahrenheit) |>
  step_impute_mean(non_invasive_blood_pressure_diastolic) |>
  step_impute_mean(respiratory_rate) |>
  
  # mode imputation for categorical variables
  step_impute_mode(marital_status) |>
  
  # create traditional dummy variables (necessary for xgboost)
  step_dummy(all_nominal_predictors()) |>
  
  # zero-variance filter
  step_zv(all_numeric_predictors()) |> 
  
  # estimate the means and standard deviations
  prep(training = mimic_other, retain = TRUE) |>
  
  print()

```
 
**Model:**

```{r}
gb_mod <- 
  boost_tree(
    mode = "classification",
    trees = 1000, 
    tree_depth = tune(),
    learn_rate = tune()
  ) |> 
  set_engine("xgboost")
gb_mod
```
 **Workflow:**
 
```{r}
gb_wf <- workflow() |>
  add_recipe(gb_recipe) |>
  add_model(gb_mod)
gb_wf
```
 
**Tuning grid:**

```{r}
gb_grid <- grid_regular(
  tree_depth(range = c(1L, 3L)),
  learn_rate(range = c(-5, 2), trans = log10_trans()),
  levels = c(3, 10)
  )
gb_grid
```
 
**Cross-validation:**

```{r}
set.seed(203)

folds <- vfold_cv(mimic_other, v = 5)
folds
```
 
Fit cross-validation.

```{r}
gb_fit <- gb_wf |>
  tune_grid(
    resamples = folds,
    grid = gb_grid,
    metrics = metric_set(roc_auc, accuracy),
    control = control_stack_grid()
    )
gb_fit
```
 
Visualize CV results:

```{r}
gb_fit |>
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = aes(x = learn_rate, y = mean, color = factor(tree_depth))) +
  geom_point() +
  labs(x = "Learning Rate", y = "CV AUC") +
  scale_x_log10()
```
 
Show the top 5 models.

```{r}
gb_fit |>
  show_best("roc_auc")
```
 
Select the best model.

```{r}
best_gb <- gb_fit |>
  select_best("roc_auc")
best_gb
```
 
**Finalize the model:**

Final workflow.

```{r}
final_wf_gb <- gb_wf |>
  finalize_workflow(best_gb)
final_wf_gb
```
 
Fit the whole training set, then predict the test cases.

```{r}
final_fit_gb <- 
  final_wf_gb |>
  last_fit(data_split)
final_fit_gb
```

Importance of features:

```{r}
final_fit_gb %>% 
  extract_fit_parsnip() %>% 
  vip()
```
 
Test metrics.

```{r}
final_fit_gb |> 
  collect_metrics()
```
 
Accuracy of test dataset:

```{r}
accuracy_gb <- final_fit_gb |> 
  collect_metrics() |>
  filter(.metric == "accuracy") |>
  pull(.estimate)
accuracy_gb
```

ROC AUC of test dataset:

```{r}
roc_auc_gb <- final_fit_gb |> 
  collect_metrics() |>
  filter(.metric == "roc_auc") |>
  pull(.estimate)
roc_auc_gb
```

 **Model stacking:**
 
 Build the stacked ensemble.
 
```{r}
mimic_model_st <- 
  # initialize the stack
  stacks() |>
  # add candidate members
  # add_candidates(logit_fit) |>
  add_candidates(rf_fit) |>
  add_candidates(gb_fit) |>
  # determine how to combine their predictions
  blend_predictions(
    penalty = 10^(-6:2),
    metrics = c("roc_auc")
    ) |>
  # fit the candidates with nonzero stacking coefficients
  fit_members()
```
 
```{r}
mimic_model_st
```
 
 Plot the result.
 
```{r}
autoplot(mimic_model_st)
```
 
To show the relationship more directly:

```{r}
autoplot(mimic_model_st, type = "members")
```

To see the top results:

```{r}
autoplot(mimic_model_st, type = "weights")
```

To identify which model configurations were assigned what stacking coefficients, we can make use of the collect_parameters() function:

```{r}
collect_parameters(mimic_model_st, "rf_fit")
```
 
```{r}
collect_parameters(mimic_model_st, "gb_fit")
```

 **Finalize classification:**
 
```{r}
mimic_pred <- mimic_test %>%
  bind_cols(predict(mimic_model_st, ., type = "prob")) %>%
  print(width = Inf)
```
 
```{r}
mimic_pred_st <- mimic_test %>%
  bind_cols(predict(mimic_model_st, mimic_test)) %>%
  print(width = Inf)

accuracy <- mimic_pred_st %>%
  accuracy(truth = los_long, estimate = .pred_class)
accuracy

```
 
 
 Computing the ROC AUC for the model:
 
```{r}
roc_auc_st <- yardstick::roc_auc(
  mimic_pred,
  truth = los_long,
  contains(".pred_No")
  )
roc_auc_st
```
Accuracy of test dataset:

```{r}
accuracy_st <- accuracy |> 
  filter(.metric == "accuracy") |>
  pull(.estimate)
accuracy_st
```

ROC AUC of test dataset:

```{r}
roc_auc_st <- roc_auc_st |> 
  filter(.metric == "roc_auc") |>
  pull(.estimate)
roc_auc_st
```

 4. Compare model classification performance on the test set. Report both the area under ROC curve and accuracy for each machine learning algorithm and the model stacking. Interpret the results. What are the most important features in predicting long ICU stays? How do the models compare in terms of performance and interpretability?
 
```{r}
# Create a tibble with the variables
model_metrics <- tibble(
  Model = c("Logistic Regression", "Random Forest", 
            "Boosting", "Model Stacking"),
  Accuracy = c(accuracy_logit, accuracy_rf, accuracy_gb, accuracy_st),
  ROC_AUC = c(roc_auc_logit, roc_auc_rf, roc_auc_gb, roc_auc_st)
)

# Print the tibble
print(model_metrics)
```
 
**Accuracy:** 

This metric represents the proportion of correctly classified instances by the 
model. Among the individual algorithms, Boosting and Random Forest perform 
slightly better than Logistic Regression. Model Stacking, which combines the 
predictions of multiple models, achieves the highest accuracy among all models.

**ROC AUC:**

ROC AUC (Receiver Operating Characteristic Area Under Curve) is a metric that 
evaluates the model's ability to discriminate between positive and negative 
classes. Similar to accuracy, Model Stacking has the highest ROC AUC score, 
indicating better overall performance in distinguishing between classes.

**Feature Importance:**

Based on Random Forest model, the most important features in predicting long ICU
is White Blood Cell Count. Based on Boosting model, the most important features 
in predicting long ICU is Temperature Fahrenheit.


**Performance and Interpretability: **

In terms of performance, Model Stacking generally outperforms individual 
algorithms in both accuracy and ROC AUC. However, Model Stacking might sacrifice 
some interpretability as it combines predictions from multiple models, making it 
harder to understand the contribution of individual features. Among individual 
algorithms, Random Forest and Boosting tend to offer good performance while 
maintaining some level of interpretability, especially in terms of feature 
importance. Logistic Regression is often highly interpretable due to its linear 
nature and easy interpretation of coefficients, but it may not capture complex 
relationships as effectively as tree-based models like Random Forest and 
Boosting.
 
