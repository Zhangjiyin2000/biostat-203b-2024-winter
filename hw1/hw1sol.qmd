---
title: "Biostat 203B Homework 1"
subtitle: Due Jan 26, 2024 @ 11:59PM
author: "Jiyin (Jenny) Zhang, UID: 606331859"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: FALSE
---

Display machine information for reproducibility:
```{r}
#| eval: true
sessionInfo()
```

## Q1. Git/GitHub

**No handwritten homework reports are accepted for this course.** We work with Git and GitHub. Efficient and abundant use of Git, e.g., frequent and well-documented commits, is an important criterion for grading your homework.

1. Apply for the [Student Developer Pack](https://education.github.com/pack) at GitHub using your UCLA email. You'll get GitHub Pro account for free (unlimited public and private repositories).

2. Create a **private** repository `biostat-203b-2024-winter` and add `Hua-Zhou` and TA team (`Tomoki-Okuno` for Lec 1; `jonathanhori` and `jasenzhang1` for Lec 80) as your collaborators with write permission.

3. Top directories of the repository should be `hw1`, `hw2`, ... Maintain two branches `main` and `develop`. The `develop` branch will be your main playground, the place where you develop solution (code) to homework problems and write up report. The `main` branch will be your presentation area. Submit your homework files (Quarto file `qmd`, `html` file converted by Quarto, all code and extra data sets to reproduce results) in the `main` branch.

4. After each homework due date, course reader and instructor will check out your `main` branch for grading. Tag each of your homework submissions with tag names `hw1`, `hw2`, ... Tagging time will be used as your submission time. That means if you tag your `hw1` submission after deadline, penalty points will be deducted for late submission.

5. After this course, you can make this repository public and use it to demonstrate your skill sets on job market.

**Answer:** Display the URL of my GitHub repository here. <https://github.com/Zhangjiyin2000/biostat-203b-2024-winter>

## Q2. Data ethics training

This exercise (and later in this course) uses the [MIMIC-IV data v2.2](https://physionet.org/content/mimiciv/2.2/), a freely accessible critical care database developed by the MIT Lab for Computational Physiology. Follow the instructions at <https://mimic.mit.edu/docs/gettingstarted/> to (1) complete the CITI `Data or Specimens Only Research` course and (2) obtain the PhysioNet credential for using the MIMIC-IV data. Display the verification links to your completion report and completion certificate here. **You must complete Q2 before working on the remaining questions.** (Hint: The CITI training takes a few hours and the PhysioNet credentialing takes a couple days; do not leave it to the last minute.)

**Answer:** 

I completed the CITI training. Here is the link to my [completion report](https://www.citiprogram.org/verify/?kc751f3e2-c959-4ab0-8744-89430dd87535-60370486). Here is the link to my [completion certificate](https://www.citiprogram.org/verify/?wb2be059f-01ad-4946-ad16-d3b2c3d94780-60370486).

I also obtained the PhysioNet credential for using the MIMIC-IV data. Here is the screenshot of my PhysioNet credential.
![PhysioNet credential](./physionet-credential.png)

## Q3. Linux Shell Commands

1. Make the MIMIC v2.2 data available at location `~/mimic`. 
```{bash}
#| eval: false
ls -l ~/mimic/
```
Refer to the documentation <https://physionet.org/content/mimiciv/2.2/> for details of data files. Please, do **not** put these data files into Git; they are big. Do **not** copy them into your directory. Do **not** decompress the gz data files. These create unnecessary big files and are not big-data-friendly practices. Read from the data folder `~/mimic` directly in following exercises. 

  Use Bash commands to answer following questions.

**Answer:** I created a symbolic link `mimic` to my MIMIC data folder. Here is the output of `ls -l ~/mimic/`:
```{bash}
ls -l ~/mimic/
```
Here is how I created the symbolic link:
```{bash}
# ln -s /Users/zhangjiyin/Desktop/ucla/23-24/winter/203B/mimic-iv-2.2 ./mimic
```
2. Display the contents in the folders `hosp` and `icu` using Bash command `ls -l`. Why are these data files distributed as `.csv.gz` files instead of `.csv` (comma separated values) files? Read the page <https://mimic.mit.edu/docs/iv/> to understand what's in each folder.

**Answer:** 

Here is the output of `ls -l ~/mimic/hosp/`:
```{bash}
ls -l ~/mimic/hosp/
```
Here is the output of `ls -l ~/mimic/icu/`:
```{bash}
ls -l ~/mimic/icu/
```
Gzip compression reduces the size of the files, making them smaller and more efficient for storage and transmission. The gzip compression is lossless, meaning that the decompressed data is identical to the original data. Also, users can download and access compressed files more quickly than their uncompressed counterparts.

Hosp: The Hosp module provides all data acquired from the hospital wide electronic health record. Information covered includes patient and admission information, laboratory measurements, microbiology, medication administration, and billed diagnoses.

ICU: The ICU module contains information collected from the clinical information system used within the ICU. Documented data includes intravenous administrations, ventilator settings, and other charted items.

ED: The ED module contains data for emergency department patients collected while they are in the ED. Information includes reason for admission, triage assessment, vital signs, and medicine reconciliaton. The subject_id and hadm_id identifiers allow MIMIC-IV-ED to be linked to other MIMIC-IV modules.

CXR: The CXR module provides lookup tables linking patient identifiers with MIMIC-CXR study_id and dicom_id, allowing analysis of patient chest x-rays to be linked with the clinical data from other MIMIC-IV modules.

Note: (NOT PUBLICLY AVAILABLE): The Note module contains deidentified free-text clinical notes for hospitalized patients.

3. Briefly describe what Bash commands `zcat`, `zless`, `zmore`, and `zgrep` do.
**Answer:**

`zcat`: `zcat` is used to display the contents of one or more compressed file without actually uncompressing it. It is equivalent to `gzip -cd`.

`zless`: `zless` is used to view the contents of a compressed file one screen at a time. It is equivalent to `gzip -cd | less`. `less` is an improved version of `more` with additional features. It allows both forward and backward navigation through the file. You can use the arrow keys, Page Up, Page Down, and other keys for navigation. Press 'q' to exit. `less` supports searching, highlighting, and can display line numbers.

`zmore`: `zmore` is used to view the contents of a compressed file one screen at a time. It is equivalent to `gzip -cd | more`. You can press the spacebar to advance to the next screen, and press the Enter key to move one line at a time.

`zgrep`: `zgrep` is used to search through one or more compressed files for a string of characters that matches a specified pattern. It is equivalent to `gzip -cd | grep`.

4. (Looping in Bash) What's the output of the following bash script?
```{bash}
#| eval: false
for datafile in ~/mimic/hosp/{a,l,pa}*.gz
do
  ls -l $datafile
done
```
Display the number of lines in each data file using a similar loop. (Hint: combine linux commands `zcat <` and `wc -l`.)

5. Display the first few lines of `admissions.csv.gz`. How many rows are in this data file? How many unique patients (identified by `subject_id`) are in this data file? Do they match the number of patients listed in the `patients.csv.gz` file? (Hint: combine Linux commands `zcat <`, `head`/`tail`, `awk`, `sort`, `uniq`, `wc`, and so on.)

6. What are the possible values taken by each of the variable `admission_type`, `admission_location`, `insurance`, and `ethnicity`? Also report the count for each unique value of these variables. (Hint: combine Linux commands `zcat`, `head`/`tail`, `awk`, `uniq -c`, `wc`, and so on; skip the header line.)

7. _To compress, or not to compress. That's the question._ Let's focus on the big data file `labevents.csv.gz`. Compare compressed gz file size to the uncompressed file size. Compare the run times of `zcat < ~/mimic/labevents.csv.gz | wc -l` versus `wc -l labevents.csv`. Discuss the trade off between storage and speed for big data files. (Hint: `gzip -dk < FILENAME.gz > ./FILENAME`. Remember to delete the large `labevents.csv` file after the exercise.)

## Q4. Who's popular in Price and Prejudice

1. You and your friend just have finished reading *Pride and Prejudice* by Jane Austen. Among the four main characters in the book, Elizabeth, Jane, Lydia, and Darcy, your friend thinks that Darcy was the most mentioned. You, however, are certain it was Elizabeth. Obtain the full text of the novel from <http://www.gutenberg.org/cache/epub/42671/pg42671.txt> and save to your local folder. 
```{bash}
#| eval: false
wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt
```
Explain what `wget -nc` does. Do **not** put this text file `pg42671.txt` in Git. Complete the following loop to tabulate the number of times each of the four characters is mentioned using Linux commands.

**Answer:** `wget -nc` downloads the file from the URL if the file does not exist in the current directory. 

```{bash}
#| eval: false
for char in Elizabeth Jane Lydia Darcy
do
  echo $char:
  # some bash commands here
  grep -o -i $char pg42671.txt | wc -l
done
```
It shows that Elizabeth was the most mentioned. She was mentioned 634 times in the book. Darcy was mentioned 418 times in the book. Jane was mentioned 293 times in the book. Lydia was mentioned 171 times in the book. The -i option in command `grep` is used for case-insensitive searching. The -o option in command `grep` is used for printing each match on a new line . The -l option in command `wc` is used for printing the number of lines in a file.

2. What's the difference between the following two commands?
```{bash}
#| eval: false
echo 'hello, world' > test1.txt
```
and
```{bash}
#| eval: false
echo 'hello, world' >> test2.txt
```
**Answer:** The first command overwrites the file `test1.txt` if the file exists. The second command appends the text to the file `test2.txt` if the file exists.

3. Using your favorite text editor (e.g., `vi`), type the following and save the file as `middle.sh`:
```{bash eval=FALSE}
#!/bin/sh
# Select lines from the middle of a file.
# Usage: bash middle.sh filename end_line num_lines
head -n "$2" "$1" | tail -n "$3"
```
Using `chmod` to make the file executable by the owner, and run
```{bash}
#| eval: false
./middle.sh pg42671.txt 20 5
```
Explain the output. Explain the meaning of `"$1"`, `"$2"`, and `"$3"` in this shell script. Why do we need the first line of the shell script?

**Answer:** The output is the 5 lines from line 16 to line 20 of the file `pg42671.txt`. The `"$1"` is the first argument of the shell script, the file name, `pg42671.txt`. The `"$2"` is the second argument of the shell script, the end line. The `"$3"` is the third argument of the shell script, the number of lines. Therefore, the shell script selects the lines from the middle of the file. To elucidate, the shell script first use command `head` to select the first 20 lines from the file `pg42671.txt` and then pass this output to the command `tail`. Then, command `tail` selects the last 5 lines from the output generated by command `head`.

The #! symbol is called a shebang or hashbang. It is a special character sequence that appears at the beginning of a script or an executable file in Unix-like operating systems. The shebang is followed by the path to the interpreter that should be used to execute the script. Therefore, the first line of the shell script tells the system to use the Bourne shell (/bin/sh) as the interpreter for executing the script. 

## Q5. More fun with Linux

Try following commands in Bash and interpret the results: `cal`, `cal 2024`, `cal 9 1752` (anything unusual?), `date`, `hostname`, `arch`, `uname -a`, `uptime`, `who am i`, `who`, `w`, `id`, `last | head`, `echo {con,pre}{sent,fer}{s,ed}`, `time sleep 5`, `history | tail`.

**Answer:** Here is the output of the commands:
```{bash}
cal
```
`cal`: display the calendar of the current month.
```{bash}
cal 2024
```
`cal 2024`: display the calendar of the year 2024.
```{bash}
cal 9 1752
```
`cal 9 1752`: display the calendar of the month September in the year 1752. The calendar of September 1752 is unusual because the Gregorian calendar was adopted in the British Empire in September 1752. The calendar was changed from the Julian calendar to the Gregorian calendar. The Julian calendar was 11 days behind the Gregorian calendar. So the 11 days from September 3 to September 13 were skipped.

```{bash}
date
```
`date`: display the current date and time.
```{bash}
hostname
```
`hostname`: display the name of the host.
```{bash}
arch
```
`arch`: display the machine hardware name.
```{bash}
uname -a
```
`uname -a`: display the system information.
```{bash}
uptime
```
`uptime`: display the current time, how long the system has been running, how many users are currently logged on, and the system load averages for the past 1, 5, and 15 minutes.
```{bash}
who am i
```
`who am i`: display the current user.
```{bash}
who
```
`who`: display the users who are currently logged in.
```{bash}
# w 
```
`w`: display the users who are currently logged in and what they are doing.
```{bash}
id
```
`id`: display the user and group information for the current user.
```{bash}
last | head
```
`last | head`: display the last logged in users.
```{bash}
echo {con,pre}{sent,fer}{s,ed}
```
`echo {con,pre}{sent,fer}{s,ed}`: display the words "consents", "confer", "presents", "present", "consented", "conferred", "presented", "presented".
```{bash}
time sleep 5
```
`time sleep 5`: display the time it takes to run the command `sleep 5`.
```{bash}
history | tail
```
`history | tail`: display the last 10 commands in the history.


## Q6. Book

1. Git clone the repository <https://github.com/christophergandrud/Rep-Res-Book> for the book _Reproducible Research with R and RStudio_ to your local machine. 

2. Open the project by clicking `rep-res-3rd-edition.Rproj` and compile the book by clicking `Build Book` in the `Build` panel of RStudio. (Hint: I was able to build `git_book` and `epub_book` but not `pdf_book`.)

The point of this exercise is (1) to get the book for free and (2) to see an example how a complicated project such as a book can be organized in a reproducible way.

For grading purpose, include a screenshot of Section 4.1.5 of the book here.

**Answer:** 

I was also able to build `git_book` and `epub_book` but not `pdf_book`. Here is the screenshot of Section 4.1.5 of the git_book.
![Section 4.1.5 of the git_book](./sec-4-1-5-screenshot-git.png) Here is the screenshot of Section 4.1.5 of the epub_book. ![Section 4.1.5 of the epub_book](./sec-4-1-5-screenshot-epub.png)